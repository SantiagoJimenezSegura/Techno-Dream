GTCEuStartupEvents.registry('gtceu:recipe_type', event => {
    event.create('primitive_raw_material_processor')
        .category('haruk0')
        .setMaxIOSize(3, 9, 3, 3)
        .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.CENTRIFUGE)
})

GTCEuStartupEvents.registry('gtceu:machine', event => {
    event.create('primitive_raw_material_processor', 'multiblock')
        .rotationState(RotationState.NON_Y_AXIS)
        .recipeType('primitive_raw_material_processor')
        .pattern(definition => FactoryBlockPattern.start()
            .aisle("F###F", "F###F", "FCCCF", "FCCCF", "FCCCF", "#####")
            .aisle("#####", "#XXX#", "X###X", "X#E#X", "X###X", "#XXX#")
            .aisle("#####", "#CCC#", "C###C", "C#E#C", "C###C", "#CCC#")
            .aisle("#####", "#CCC#", "C###C", "C#E#C", "C###C", "#CCC#")
            .aisle("#####", "#CCC#", "C###C", "C#E#C", "C###C", "#CCC#")
            .aisle("#####", "#XXX#", "X###X", "X#E#X", "X###X", "#XXX#")
            .aisle("F###F", "F###F", "FCCCF", "FCHCF", "FCCCF", "#####")
            .where('#', Predicates.any())
            .where('C', Predicates.blocks('gtceu:steam_machine_casing')
                .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                .or(Predicates.abilities(PartAbility.STEAM_EXPORT_ITEMS).setMaxGlobalLimited(3))
                .or(Predicates.abilities(PartAbility.STEAM_IMPORT_ITEMS).setMaxGlobalLimited(2)))
            .where("F", Predicates.blocks("gtceu:invar_frame"))
            .where("E", Predicates.blocks("gtceu:bronze_pipe_casing"))
            .where("X", Predicates.blocks("gtceu:bronze_firebox_casing"))
            .where('H', Predicates.controller(Predicates.blocks(definition.get())))
            .build())
    .workableCasingModel("gtceu:block/casings/solid/machine_casing_bronze_plated_bricks", "gtceu:block/multiblock/bedrock_ore_miner")
  })